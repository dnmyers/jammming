{"version":3,"sources":["Spotify.js"],"names":["accessToken","client_id","redirect_uri","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackURIs","length","userID","method","body","JSON","stringify","playlistID","uris"],"mappings":"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","sourcesContent":["let accessToken = '';\r\nconst client_id = 'f1b58fbb435f44a28aa866b0aaf93a88';\r\nconst redirect_uri = 'http://localhost:3000/';\r\n// const redirect_uri = 'http://dnm-jammming.surge.sh';\r\n\r\n// Client ID: f1b58fbb435f44a28aa866b0aaf93a88\r\n// Client Secret: 467b34493b8a47bba6cd9a3f3276af18\r\n\r\nconst Spotify = {\r\n    // GET ACCESS TOKEN\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        // Check for access_token match and expires_in match in URL\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n\r\n            // Clear the parameters and grab a new access token when it expires\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n\r\n            return accessToken\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirect_uri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    // SEARCH FOR TRACK\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            \r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }));\r\n        });\r\n    },\r\n\r\n    // SAVE PLAYLIST\r\n    savePlaylist(name, trackURIs) {\r\n        if (!name || !trackURIs.length) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}` };\r\n\r\n        let userID;\r\n\r\n        // GET USERID\r\n        return fetch(`https://api.spotify.com/v1/me`, { headers: headers }\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userID = jsonResponse.id;\r\n\r\n            // CREATE A NEW PLAYLIST AND GET PLAYLIST ID\r\n            return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\r\n                {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ name: name })\r\n                }).then(response => response.json()\r\n                ).then(jsonResponse => {\r\n                    const playlistID = jsonResponse.id;\r\n\r\n                    // ADD TRACKS TO PLAYLIST\r\n                    return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`,\r\n                        {\r\n                            headers: headers,\r\n                            method: 'POST',\r\n                            body: JSON.stringify({ uris: trackURIs })\r\n                        }).then(response => response.json())\r\n                });\r\n        });\r\n    }\r\n};\r\n\r\nexport default Spotify;"],"file":"Spotify.dev.js"}