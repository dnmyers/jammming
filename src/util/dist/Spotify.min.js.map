{"version":3,"sources":["Spotify.js"],"names":["accessToken","client_id","redirect_uri","getAccessToken","window","location","href","match","expiresInMatch","accessTokenMatch","setTimeout","expiresIn","history","Number","accessUrl","concat","search","term","Spotify","fetch","Authorization","response","json","then","jsonResponse","tracks","items","map","track","id","artist","artists","name","album","uri","savePlaylist","trackURIs","length","headers","userID","method","body","JSON","stringify","playlistID","uris"],"mappings":"2FAAA,IAAIA,YAAc,GACZC,UAAY,mCACZC,aAAe,yBAAfA,QAAY,CAIlBC,eAJkB,WASV,GAAIH,YAHC,OAAGA,YAIJ,IAAOA,EAAPI,OAAAC,SAAAC,KAAAC,MAAA,wBAGJC,EAAAJ,OAAAC,SAAAC,KAAAC,MAAA,sBAIA,GAAIE,GAAoBD,EAAgB,CAHlCC,YAAgBA,EAAmBH,GACnCE,IAAAA,EAAiBJ,OAAOC,EAAoB,IAOxC,OAJNL,OAAWU,WAAGD,WAAAA,OAAgBT,YAA9B,IAAA,IAAAW,GACMA,OAASC,QAAGC,UAAOL,eAEzB,KAAA,KACOE,YAAmCC,IAASG,EAAnD,oDAAAC,OAAAd,UAAA,mEAAAc,OAAAb,cACME,OAACQ,SAAPE,GAMHE,OA7BS,SA6BTC,GAvBO,IAAAjB,EAAAkB,QAAAf,iBAAA,OAAAgB,MAAA,kDAAAJ,OA2BCE,GAAA,CACHjB,QAAW,CAELoB,cAAA,UAAAL,OAAAf,MAEJoB,KAAAA,SAAAA,GADK,OAAAC,EAAAC,SADNC,KAIC,SAAAC,GACJ,OAAOH,EAAPI,OAICD,EAAAC,OAAAC,MAAAC,IAAA,SAAAC,GAAA,MAAA,CAGGC,GAAID,EAAMC,GADPL,KAAAA,EAAaC,KAA2BK,OAAAF,EAAAG,QAAA,GAAAC,KACvCJ,MADuCA,EAAAK,MAAAD,KAErCJ,IAAKA,EAFgCM,OAL3CV,MAYPW,aAtDS,SAoCVH,EAAAI,GA9BQ,GAAAJ,GAAAI,EAAAC,OAAA,CAsDJ,IAGErC,EAHFA,EAAAkB,QAAAf,iBACHmC,EAAA,CAAAlB,cAAA,UAAAL,OAAAf,IAGD,OAAAmB,MAAA,gCAAA,CAAAmB,QAAAA,IAEIC,KARsB,SAAAlB,GAU1B,OAAAA,EAAAC,SAGEC,KAAK,SAAAC,GADQ,OADRL,EAAKK,EAAAK,GACOR,MAASC,oCAAAA,OAAbiB,EAAajB,cACrB,CACME,QAAaK,EAMdW,OAAQ,OAHJC,KAAAC,KAAAC,UAAA,CAAAX,KAAAA,MAEKM,KADb,SAAAjB,GAAA,OAAAA,EAAAC,SAEYC,KAFZ,SAAAC,GAGemB,IAAAA,EAAUnB,EAAAK,GACjB,OAAAR,MAAQ,oCAAAN,OAAAwB,EAAA,eAAAxB,OAAA6B,EAAA,WAAatB,CACtBE,QAAYc,EACId,OAAAA,OAOXiB,KAAMC,KAAKC,UAAU,CAAEE,KAAMT,MAJzBb,KAAA,SAAAF,GAAA,OAAAA,EAAAC,yBAALJ","file":"Spotify.min.js","sourcesContent":["let accessToken = '';\r\nconst client_id = 'f1b58fbb435f44a28aa866b0aaf93a88';\r\nconst redirect_uri = 'http://localhost:3000/';\r\n// const redirect_uri = 'http://dnm-jammming.surge.sh';\r\n\r\n// Client ID: f1b58fbb435f44a28aa866b0aaf93a88\r\n// Client Secret: 467b34493b8a47bba6cd9a3f3276af18\r\n\r\nconst Spotify = {\r\n    // GET ACCESS TOKEN\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        // Check for access_token match and expires_in match in URL\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n\r\n            // Clear the parameters and grab a new access token when it expires\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n\r\n            return accessToken\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirect_uri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    // SEARCH FOR TRACK\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${accessToken}`\r\n            }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if (!jsonResponse.tracks) {\r\n                return [];\r\n            }\r\n            \r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }));\r\n        });\r\n    },\r\n\r\n    // SAVE PLAYLIST\r\n    savePlaylist(name, trackURIs) {\r\n        if (!name || !trackURIs.length) {\r\n            return;\r\n        }\r\n\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}` };\r\n\r\n        let userID;\r\n\r\n        // GET USERID\r\n        return fetch(`https://api.spotify.com/v1/me`, { headers: headers }\r\n        ).then(response => response.json()\r\n        ).then(jsonResponse => {\r\n            userID = jsonResponse.id;\r\n\r\n            // CREATE A NEW PLAYLIST AND GET PLAYLIST ID\r\n            return fetch(`https://api.spotify.com/v1/users/${userID}/playlists`,\r\n                {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ name: name })\r\n                }).then(response => response.json()\r\n                ).then(jsonResponse => {\r\n                    const playlistID = jsonResponse.id;\r\n\r\n                    // ADD TRACKS TO PLAYLIST\r\n                    return fetch(`https://api.spotify.com/v1/users/${userID}/playlists/${playlistID}/tracks`,\r\n                        {\r\n                            headers: headers,\r\n                            method: 'POST',\r\n                            body: JSON.stringify({ uris: trackURIs })\r\n                        }).then(response => response.json())\r\n                });\r\n        });\r\n    }\r\n};\r\n\r\nexport default Spotify;"]}